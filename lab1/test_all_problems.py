#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö 20 –∑–∞–¥–∞—á.
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–º–ø–ª–µ–∫—Å-–º–µ—Ç–æ–¥–∞ —Å scipy.
"""

import os
import sys
import numpy as np
from simplex_solver import SimplexSolver
from simplex_solver_lib import LinprogSolver


class Colors:
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    RESET = '\033[0m'
    BOLD = '\033[1m'


def test_problem(file_path, problem_num):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É."""
    print(f"\n{Colors.CYAN}{'='*80}")
    print(f"–¢–ï–°–¢ #{problem_num}: {os.path.basename(file_path)}")
    print(f"{'='*80}{Colors.RESET}")
    
    try:
        # –†–µ—à–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é scipy
        scipy_solver = LinprogSolver(file_path)
        scipy_result = scipy_solver.solve()
        
        # –†–µ—à–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        solver = SimplexSolver(file_path)
        solver.verbose = False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
        solver.solve()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        scipy_success = scipy_result.success
        own_success = not (solver.is_infeasible or solver.is_unbounded)
        
        if scipy_success and own_success:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            own_x = {}
            for i in range(solver.num_original_vars):
                own_x[f'x{i+1}'] = 0.0
            
            rhs_col = solver.tableau.shape[1] - 1
            for i, basis_col_idx in enumerate(solver.basis):
                if basis_col_idx < solver.num_original_vars:
                    var_name = solver.all_var_names[basis_col_idx]
                    own_x[var_name] = solver.tableau[i, rhs_col]
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
            max_diff = 0
            for i in range(len(scipy_result.x)):
                var_name = f'x{i+1}'
                scipy_val = scipy_result.x[i]
                own_val = own_x.get(var_name, 0.0)
                diff = abs(scipy_val - own_val)
                max_diff = max(max_diff, diff)
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¶–§
            scipy_z = np.dot(scipy_solver.objective_coeffs, scipy_result.x)
            final_z_value = solver.tableau[-1, -1]
            
            if solver.objective_type == 'minimize':
                own_z = -final_z_value
            else:
                own_z = final_z_value
            
            z_diff = abs(scipy_z - own_z)
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            print(f"\n{Colors.BLUE}–†–µ—à–µ–Ω–∏–µ:{Colors.RESET}")
            print(f"  –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: x = ({', '.join([f'{scipy_result.x[i]:.4f}' for i in range(len(scipy_result.x))])})")
            print(f"  Z = {scipy_z:.6f}")
            
            print(f"\n{Colors.BLUE}–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:{Colors.RESET}")
            print(f"  –ú–∞–∫—Å. —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {max_diff:.6e}")
            print(f"  –†–∞–∑–Ω–∏—Ü–∞ –≤ Z: {z_diff:.6e}")
            
            tolerance = 1e-5
            if max_diff < tolerance and z_diff < tolerance:
                print(f"\n{Colors.GREEN}‚úì –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù{Colors.RESET} (–ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å < {tolerance})")
                return True
            else:
                print(f"\n{Colors.RED}‚úó –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù{Colors.RESET} (–ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å ‚â• {tolerance})")
                return False
                
        elif not scipy_success and not own_success:
            print(f"\n{Colors.YELLOW}‚ö† –û–ë–ê –ú–ï–¢–û–î–ê: –Ω–µ—Ç —Ä–µ—à–µ–Ω–∏—è{Colors.RESET}")
            return True
        else:
            print(f"\n{Colors.RED}‚úó –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–•–û–î–Ø–¢–°–Ø{Colors.RESET}")
            if scipy_success:
                print(f"  Scipy: –µ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–µ")
            else:
                print(f"  Scipy: {scipy_result.message}")
            
            if own_success:
                print(f"  –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è: –µ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–µ")
            else:
                if solver.is_infeasible:
                    print(f"  –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è: –Ω–µ—Å–æ–≤–º–µ—Å—Ç–Ω–∞")
                if solver.is_unbounded:
                    print(f"  –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è: –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"\n{Colors.RED}‚úó –û–®–ò–ë–ö–ê: {e}{Colors.RESET}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print(f"{Colors.BOLD}{Colors.CYAN}")
    print("="*80)
    print("–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ó–ê–î–ê–ß")
    print("="*80)
    print(f"{Colors.RESET}")
    
    # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á
    test_dir = "test_problems"
    if not os.path.exists(test_dir):
        print(f"{Colors.RED}–û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{test_dir}/' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!{Colors.RESET}")
        print(f"\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python generate_test_problems.py")
        sys.exit(1)
    
    problem_files = sorted([f for f in os.listdir(test_dir) if f.endswith('.txt')])
    
    if not problem_files:
        print(f"{Colors.RED}–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –∑–∞–¥–∞—á –≤ '{test_dir}/'!{Colors.RESET}")
        sys.exit(1)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(problem_files)}\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    results = {}
    for i, filename in enumerate(problem_files, start=1):
        file_path = os.path.join(test_dir, filename)
        success = test_problem(file_path, i)
        results[filename] = success
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{Colors.BOLD}{Colors.CYAN}")
    print("="*80)
    print("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*80)
    print(f"{Colors.RESET}\n")
    
    passed = sum(1 for v in results.values() if v)
    total = len(results)
    
    for filename, success in results.items():
        if success:
            status = f"{Colors.GREEN}‚úì PASS{Colors.RESET}"
        else:
            status = f"{Colors.RED}‚úó FAIL{Colors.RESET}"
        print(f"{status}: {filename}")
    
    print(f"\n{Colors.BOLD}–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}{Colors.RESET}")
    
    if passed == total:
        print(f"\n{Colors.GREEN}{Colors.BOLD}üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!{Colors.RESET}")
        return 0
    else:
        print(f"\n{Colors.YELLOW}‚ö† –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏{Colors.RESET}")
        return 1


if __name__ == "__main__":
    sys.exit(main())

